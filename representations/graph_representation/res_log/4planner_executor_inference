1================
 The most important key information is the movie name. Here are the movie names extracted from the data sources:

* The Shawshank Redemption
* The Godfather
* The Lord of the Rings: The Return of the King
* Paranormal Activity
* The Blair Witch Project
* Mad Max
* Avatar
* Titanic
* Jurassic Park
* The Dark Knight
* The Godfather: Part II


2================
 You're a helpful data scientist, you need to answer user questions: Here is the plan to fulfill the request:

1. Extract the movie information from Data Source 0 using EXTRACT(source=Data Source 0, target_schema=Movie(budget, genre, global_gross, name, releaseYear, score, user_reviews)) to get the initial movie records.
2. Extract the user reviews from Data Source 1 using EXTRACT(source=Data Source 1, target_schema=Movie(name, user_reviews)) to get the user reviews for each movie.
3. Extract the movie scores from Data Source 2 using EXTRACT(source=Data Source 2, target_schema=Movie(name, score)) to get the scores for each movie.
4. Merge the movie records from step 1 with the user reviews from step 2 using MERGE(left=movie records, right=user reviews, key=name) to add the user reviews to the movie records.
5. Merge the movie records from step 4 with the scores from step 3 using MERGE(left=movie records, right=scores, key=name) to add the scores to the movie records.
6. Filter the movie records to only include the movies mentioned in the request using FILTER(source=movie records, condition=name in ["The Shawshank Redemption", "The Godfather", "The Lord of the Rings: The Return of the King", "Paranormal Activity", "The Blair Witch Project", "Mad Max", "Avatar", "Titanic", "Jurassic Park", "The Dark Knight", "The Godfather: Part II"]).
7. Append the filtered movie records to an empty list using APPEND(source=empty list, others=filtered movie records) to create the final output.

The executor should focus on extracting the relevant information from each data source, merging the records based on the movie name, and filtering the records to only include the movies mentioned in the request. The output will be a list of movie records in the output schema, with each record containing the budget, genre, global gross, name, release year, score, and user reviews for each movie.


3================
  

Here is the output in JSON format:

```
{
    "The Shawshank Redemption": {
        "budget": 25000000,
        "genre": "Drama",
        "global_gross": 58300000,
        "name": "The Shawshank Redemption",
        "releaseYear": 1994,
        "score": 9.3,
        "user_reviews": ["This movie is a masterpiece. Every performance is perfect, and the story is so inspiring. I've watched it countless times and it never gets old.", "Overrated! It's slow, boring, and predictable. I don't understand why people rave about it.", "It's a good movie, but not my favorite. The acting is solid, but the pacing felt a bit off for me."]
    },
    "The Godfather": {
        "budget": 6000000,
        "genre": "Crime, Drama",
        "global_gross": 245000000,
        "name": "The Godfather",
        "releaseYear": 1972,
        "score": 9.2,
        "user_reviews": ["A cinematic masterpiece! The acting, the story, the music... everything about this film is perfect. It's a must-watch for any film lover.", "A true classic. The Godfather is a masterclass in filmmaking, with unforgettable characters and a gripping story.", "Too long and too slow. I found myself checking my watch constantly. Not my cup of tea."]
    },
    "The Lord of the Rings: The Return of the King": {
        "budget": 94000000,
        "genre": "Adventure, Drama, Fantasy",
        "global_gross": 1146000000,
        "name": "The Lord of the Rings: The Return of the King",
        "releaseYear": 2003,
        "score": 8.9,
        "user_reviews": ["An epic conclusion to a legendary trilogy! The battles are breathtaking, the emotions are raw, and the ending is perfect. A true masterpiece of fantasy cinema.", "Too much CGI and too many endings. I felt like it was just dragging on and on. I prefer the first two movies in the trilogy.", "Overly sentimental and drawn out. I found myself getting bored during some of the longer scenes."]
    },
    "Avatar": {
        "budget": 237000000,
        "genre": "Science Fiction, Action, Adventure",
        "global_gross": 2923000000,
        "name": "Avatar",
        "releaseYear": 2009,
        "score": null,
        "user_reviews": []
    },
    "Titanic": {
        "budget": 200000000,
        "genre": "Romance, Drama, Disaster",
        "global_gross": 2202000000,
        "name": "Titanic",
        "releaseYear": 1997,
        "score": null,
        "user_reviews": []
    },
    "Paranormal Activity": {
        "budget": 15000,
        "genre": "Horror",
        "global_gross": 193400000,
        "name": "Paranormal Activity",
        "releaseYear": 2007,
        "score": null,
        "user_reviews": []
    },
    "The Blair Witch Project": {
        "budget": 60000,
        "genre": "Horror",
        "global_gross": 248600000,
        "name": "The Blair Witch Project",
        "releaseYear": 1999,
        "score": null,
        "user_reviews": []
    },
    "Mad Max": {
        "budget": 350000,
        "genre": "Action",
        "global_gross": 378400000,
        "name": "Mad Max",
        "releaseYear": 2016,
        "score": null,
        "user_reviews": []
    },
    "Jurassic Park": {
        "budget": null,
        "genre": null,
        "global_gross": null,
        "name": "Jurassic Park",
        "releaseYear": null,
        "score": null,
        "user_reviews": ["A thrilling adventure that still holds up today. The dinosaurs are amazing!", "A classic Spielberg film with memorable characters, suspenseful action, and groundbreaking special effects.", "The acting is cheesy and the science is questionable."]
    },
    "The Dark Knight": {
        "budget": null,
        "genre": null,
        "global_gross": null,
        "name": "The Dark Knight",
        "releaseYear": 2008,
        "score": 9.0,
        "user_reviews": []
    }
}
```
